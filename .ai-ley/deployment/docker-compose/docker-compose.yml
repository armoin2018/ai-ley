version: '3.8'

services:
  # Web Application
  web:
    image: ${WEB_IMAGE:-nginx:alpine}
    container_name: ${PROJECT_NAME:-myapp}_web
    restart: unless-stopped
    ports:
      - '${WEB_PORT:-80}:80'
      - '${WEB_SSL_PORT:-443}:443'
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - web_logs:/var/log/nginx
      - static_files:/var/www/html
    networks:
      - frontend
      - backend
    depends_on:
      app:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'wget', '--quiet', '--tries=1', '--spider', 'http://localhost/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.web.rule=Host(`${DOMAIN:-localhost}`)'
      - 'traefik.http.services.web.loadbalancer.server.port=80'

  # Application Server
  app:
    image: ${APP_IMAGE:-myapp:latest}
    container_name: ${PROJECT_NAME:-myapp}_app
    restart: unless-stopped
    ports:
      - '${APP_PORT:-8080}:8080'
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@database:5432/${DB_NAME}
      - REDIS_URL=redis://redis:6379/${REDIS_DB:-0}
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - static_files:/app/public
    networks:
      - backend
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    secrets:
      - jwt_secret
      - db_password
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Database
  database:
    image: ${DB_IMAGE:-postgres:15-alpine}
    container_name: ${PROJECT_NAME:-myapp}_db
    restart: unless-stopped
    ports:
      - '${DB_PORT:-5432}:5432'
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./configs/postgresql/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - db_logs:/var/log/postgresql
    networks:
      - backend
    secrets:
      - db_password
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER} -d ${DB_NAME}']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  # Redis Cache
  redis:
    image: ${REDIS_IMAGE:-redis:7-alpine}
    container_name: ${PROJECT_NAME:-myapp}_redis
    restart: unless-stopped
    ports:
      - '${REDIS_PORT:-6379}:6379'
    command: redis-server /etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./configs/redis/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - backend
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: ${PROJECT_NAME:-myapp}_prometheus
    restart: unless-stopped
    ports:
      - '${PROMETHEUS_PORT:-9090}:9090'
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring
      - backend
    healthcheck:
      test: ['CMD', 'wget', '--quiet', '--tries=1', '--spider', 'http://localhost:9090/-/healthy']
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: ${PROJECT_NAME:-myapp}_grafana
    restart: unless-stopped
    ports:
      - '${GRAFANA_PORT:-3000}:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - monitoring
    depends_on:
      - prometheus
    healthcheck:
      test:
        ['CMD-SHELL', 'wget --quiet --tries=1 --spider http://localhost:3000/api/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  frontend:
    driver: bridge
    name: ${PROJECT_NAME:-myapp}_frontend
  backend:
    driver: bridge
    name: ${PROJECT_NAME:-myapp}_backend
    internal: true
  monitoring:
    driver: bridge
    name: ${PROJECT_NAME:-myapp}_monitoring

volumes:
  postgres_data:
    name: ${PROJECT_NAME:-myapp}_postgres_data
  redis_data:
    name: ${PROJECT_NAME:-myapp}_redis_data
  app_data:
    name: ${PROJECT_NAME:-myapp}_app_data
  static_files:
    name: ${PROJECT_NAME:-myapp}_static_files
  prometheus_data:
    name: ${PROJECT_NAME:-myapp}_prometheus_data
  grafana_data:
    name: ${PROJECT_NAME:-myapp}_grafana_data
  web_logs:
    name: ${PROJECT_NAME:-myapp}_web_logs
  app_logs:
    name: ${PROJECT_NAME:-myapp}_app_logs
  db_logs:
    name: ${PROJECT_NAME:-myapp}_db_logs

secrets:
  db_password:
    file: ./secrets/db_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
